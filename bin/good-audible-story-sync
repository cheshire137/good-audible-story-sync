#!/usr/bin/env ruby
# encoding: utf-8

require_relative "../lib/good_audible_story_sync"

options = GoodAudibleStorySync::Options.parse(script_name: __FILE__)

audible_auth = GoodAudibleStorySync::Audible::AuthFlow.run(output_file: options.credentials_file)
if audible_auth.nil?
  exit 1
end

audible_client = GoodAudibleStorySync::Audible::Client.new(auth: audible_auth, options: options)

unless audible_auth.loaded_from_file?
  puts "Getting Audible user profile..."
  user_profile = audible_client.get_user_profile
  puts user_profile.to_s(indent_level: 1)
end

finish_times_by_asin = audible_client.get_finish_times_by_asin
if finish_times_by_asin.empty?
  puts "No books in Audible library have been finished"
  exit 0
else
  finish_time_units = finish_times_by_asin.size == 1 ? "book" : "books"
  puts "Loaded finished status for #{finish_times_by_asin.size} #{finish_time_units} from " \
    "Audible library"
end

library_file = options.library_file
if File.exist?(library_file)
  puts "Loading Audible library from file #{library_file}..."
  library = GoodAudibleStorySync::Audible::Library.load_from_file(library_file)
else
  puts "Fetching Audible library from API..."
  library = audible_client.get_all_library_pages
  puts "Saving Audible library data to file #{library_file}..."
  library.save_to_file(library_file)
end

total_items = library.total_items
library_item_units = total_items == 1 ? "book" : "books"
puts "Loaded #{total_items} #{library_item_units} from Audible library"

library.items.each do |library_item|
  library_item.finished_at = finish_times_by_asin[library_item.asin]
end

finished_items, unfinished_items = library.items.partition(&:finished?)
total_finished = finished_items.size
finished_item_units = total_finished == 1 ? "book" : "books"
puts "#{total_finished} #{finished_item_units} in Audible library have been finished:"

finished_items.each do |library_item|
  puts library_item.to_s(indent_level: 1)
end

if unfinished_items.empty?
  puts "All books in Audible library have been finished!"
else
  total_unfinished = unfinished_items.size
  unfinished_item_units = total_unfinished == 1 ? "book" : "books"
  puts "#{total_unfinished} #{unfinished_item_units} in Audible library have not been finished"
end
